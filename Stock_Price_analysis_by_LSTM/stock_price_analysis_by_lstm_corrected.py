# -*- coding: utf-8 -*-
"""Stock_Price_analysis_by_LSTM_corrected.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UagvjezYs3fhjGMR5GgSTF87NDPyiRCq
"""

!pip install yfinance
import yfinance as yf
import numpy as np
import pandas as pd
#define the ticker symbol
tickerSymbol = 'TSLA'

#get data on this ticker
tickerData = yf.Ticker(tickerSymbol)

#get the historical prices for this ticker
tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2021-3-25')

#see your data
tickerDf

tickerDf.tail(3)

tickerDf['Close'].plot(figsize=(16,6))

tickerDf.rolling(7).mean().head(20)

tickerDf['Close'].plot(figsize=(16,6))
tickerDf.rolling(window=30).mean()['Close'].plot()

df1=tickerDf.reset_index()['Close']

df1

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))

print(df1)
print(df1.shape)
df1.ndim

features_set = []
labels = []
for i in range(60, len(df1)):
    features_set.append(df1[i-60:i, 0])
    labels.append(df1[i, 0])
    if i<=61:
        print(features_set)
        print(labels)

features_set, labels = np.array(features_set), np.array(labels)

features_set = np.reshape(features_set, (features_set.shape[0], features_set.shape[1], 1))

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape=(features_set.shape[1], 1)))

model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50))
model.add(Dropout(0.2))

model.add(Dense(units = 1))

model.compile(optimizer = 'adam', loss = 'mean_squared_error')

model.summary()

model.fit(features_set, labels, epochs = 100, batch_size = 32)

tickerSymbol = 'TSLA'

#get data on this ticker
tickerData = yf.Ticker(tickerSymbol)

#get the historical prices for this ticker
tickerDf1 = tickerData.history(period='1d', start='2021-02-25', end='2021-03-25')

#see your data
tickerDf1

real_stock_price =tickerDf1.iloc[:, 3:4].values
real_stock_price

test_set=tickerDf1['Close']
test_set=pd.DataFrame(test_set)
test_set.shape

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))

dataset_total = pd.concat((tickerDf['Close'], tickerDf1['Close']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(tickerDf1) - 60:].values
inputs = inputs.reshape(-1,1)

inputs = scaler.fit_transform(inputs)

X_test = []
for i in range(60, 81):
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = model.predict(X_test)
predicted_stock_price1 = scaler.inverse_transform(predicted_stock_price)

predicted_stock_price1=pd.DataFrame(predicted_stock_price1)
predicted_stock_price1.info()

import matplotlib.pyplot as plt
plt.plot(real_stock_price, color = 'red', label = 'Real Tesla Stock Price')
plt.plot(predicted_stock_price1, color = 'blue', label = 'Predicted Tesla Stock Price')
plt.title('Tesla Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Tesla Stock Price')
plt.legend()
plt.show()